import { NextResponse } from "next/server";
import NotificacaoCRUD from "@/model/NotificacaoCRUD";

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const Usuario = searchParams.get("Usuario") || null;
    const Post = searchParams.get("Post") || null;

    console.log(
      "üìå Par√¢metros recebidos ->",
      `Usuario: ${Usuario}, Post: ${Post}`
    );

    if (Post) {
      try {
        const result = await NotificacaoCRUD("postread", { Post });
        return NextResponse.json({ status: 200, result });
      } catch (error) {
        console.error("‚ùå Erro ao buscar coment√°rios por Post:", error);
        return NextResponse.json(
          { error: "Erro ao buscar coment√°rios" },
          { status: 500 }
        );
      }
    }
    if (Usuario) {
      try {
        const result = await NotificacaoCRUD("usuarioread", { Usuario });
        return NextResponse.json({ status: 200, result });
      } catch (error) {
        console.error("‚ùå Erro ao buscar coment√°rios por Post:", error);
        return NextResponse.json(
          { error: "Erro ao buscar coment√°rios" },
          { status: 500 }
        );
      }
    }
    const result = await NotificacaoCRUD("list");
    return NextResponse.json({ status: 200, posts: result });
  } catch (error) {
    console.error("‚ùå Erro ao buscar coment√°rios:", error);
    return NextResponse.json(
      { error: "Erro ao buscar coment√°rios" },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    console.log("üìù Recebendo requisi√ß√£o POST para criar notifica√ß√£o...");

    const data = await request.json();
    const Conteudo = data.Conteudo || null;
    const Post = data.Post || null;
    const Owner = data.Owner || null;

    console.log(
      "üìå Dados recebidos ->",
      `Conteudo: ${Conteudo}, Usuario: ${Owner}, Post: ${Post}`
    );
    // üö® Seguran√ßa: Deve validar o usu√°rio logado antes de criar coment√°rios
    if (!Conteudo || !Post || !Owner) {
      console.warn(
        "‚ö†Ô∏è Tentativa de cria√ß√£o de notifica√ß√£o com dados incompletos!"
      );
      return NextResponse.json(
        { error: "Conte√∫do, Post e Owner s√£o obrigat√≥rios" },
        { status: 400 }
      );
    }
    console.log("‚úÖ Criando notifica√ß√£o...");
    const result = await NotificacaoCRUD("create", {
      Conteudo: `New comment on your post: "${Conteudo.substring(0, 50)}${
        Conteudo.length > 50 ? "..." : ""
      }"`,
      Usuario: Owner,
      Post,
    });
    return NextResponse.json({ status: 200, result });
  } catch (error) {
    console.error("‚ùå Erro ao criar notifica√ß√£o:", error);
    return NextResponse.json(
      { error: "Erro ao criar notifica√ß√£o" },
      { status: 500 }
    );
  }
}

export async function PUT(request: Request) {
  try {
    const { Id, Read } = await request.json();

    if (!Id || !Read) {
      return NextResponse.json({ error: "Dados incompletos" }, { status: 400 });
    }
    console.log("Atualizando Notifica√ß√£o:", { Id, Read });
    const result = await NotificacaoCRUD("readed", {
      Id: Id,
      Read: Read,
    });

    return NextResponse.json({ status: 200, result });
  } catch (error) {
    console.error("Erro no PUT:", error);
    return NextResponse.json(
      { error: "Erro ao atualizar post" },
      { status: 500 }
    );
  }
}
