import { NextResponse } from "next/server";
import ComentariosCRUD from "@/model/ComentarioCRUD";
import NotificacaoCRUD from "@/model/NotificacaoCRUD";

export async function GET(request: Request) {
  try {
    //console.log("üì© Recebendo requisi√ß√£o GET para coment√°rios...");

    const { searchParams } = new URL(request.url);
    const Conteudo = searchParams.get("Conteudo") || null;
    const Usuario = searchParams.get("Usuario") || null;
    const Post = searchParams.get("Post") || null;

    console.log(
      "üìå Par√¢metros recebidos ->",
      `Conteudo: ${Conteudo}, Usuario: ${Usuario}, Post: ${Post}`
    );

    if (Conteudo) {
      console.warn(
        "‚ö†Ô∏è GET create est√° obsoleto. Verifique se deveria estar aqui."
      );
    }

    if (Post) {
      // console.log(`üîç Buscando coment√°rios para o post ID: ${Post}`);
      try {
        const result = await ComentariosCRUD("postread", { Post });

        // console.log("‚úÖ Coment√°rios encontrados:", result);
        return NextResponse.json({ status: 200, result });
      } catch (error) {
        console.error("‚ùå Erro ao buscar coment√°rios por Post:", error);
        return NextResponse.json(
          { error: "Erro ao buscar coment√°rios" },
          { status: 500 }
        );
      }
    }

    //console.log("üìÇ Buscando todos os coment√°rios...");
    const result = await ComentariosCRUD("list");

    //console.log("‚úÖ Lista de coment√°rios retornada:", result);
    return NextResponse.json({ status: 200, posts: result });
  } catch (error) {
    console.error("‚ùå Erro ao buscar coment√°rios:", error);
    return NextResponse.json(
      { error: "Erro ao buscar coment√°rios" },
      { status: 500 }
    );
  }
}

export async function POST(request: Request) {
  try {
    console.log("üìù Recebendo requisi√ß√£o POST para criar coment√°rio...");

    const data = await request.json();
    const Conteudo = data.Conteudo || null;
    const Usuario = data.Usuario || null;
    const Post = data.Post || null;
    const Owner = data.Owner || null;

    console.log(
      "üìå Dados recebidos ->",
      `Conteudo: ${Conteudo}, Usuario: ${Usuario}, Post: ${Post}, Owner: ${Owner}`
    );

    // üö® Seguran√ßa: Deve validar o usu√°rio logado antes de criar coment√°rios
    if (!Usuario) {
      console.warn("‚ö†Ô∏è Tentativa de cria√ß√£o de coment√°rio sem usu√°rio!");
      return NextResponse.json(
        { error: "Usu√°rio n√£o autenticado" },
        { status: 401 }
      );
    }

    if (!Conteudo || !Post) {
      console.warn(
        "‚ö†Ô∏è Tentativa de cria√ß√£o de coment√°rio com dados incompletos!"
      );
      return NextResponse.json(
        { error: "Conte√∫do e Post s√£o obrigat√≥rios" },
        { status: 400 }
      );
    }

    console.log("‚úÖ Criando coment√°rio...");
    const result = await ComentariosCRUD("create", {
      Conteudo,
      Usuario,
      Post,
    });
    //console.log("üéâ Coment√°rio criado com sucesso:", result);

    if (Owner) {
      console.log("Comentario no post de ", Owner);
      //sendNotification(Owner, `Novo comentario no seu post!`);
    }
    if (Usuario !== Owner) {
      try {
        console.log("üîî Trying to create notification");
        const result = await NotificacaoCRUD("create", {
          Conteudo: `New comment on your post: "${Conteudo.substring(0, 10)}${
            Conteudo.length > 10 ? "..." : ""
          }"`,
          Usuario: Owner,
          Post,
        });
        console.log("Resesult : ", result);
      } catch (error) {}
    }

    return NextResponse.json({ status: 200, result });
  } catch (error) {
    console.error("‚ùå Erro ao criar coment√°rio:", error);
    return NextResponse.json(
      { error: "Erro ao criar coment√°rio" },
      { status: 500 }
    );
  }
}
